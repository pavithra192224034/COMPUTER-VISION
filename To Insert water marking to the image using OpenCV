import cv2
import numpy as np
original_image_path = r"path_to_original_image.jpg"
watermark_image_path = r"path_to_watermark_image.png"
original_image = cv2.imread(original_image_path)
watermark_image = cv2.imread(watermark_image_path, cv2.IMREAD_UNCHANGED)
watermark_height, watermark_width, _ = watermark_image.shape
original_height, original_width, _ = original_image.shape
resize_factor = min(original_width / watermark_width, original_height / watermark_height)
watermark_image_resized = cv2.resize(watermark_image, (int(watermark_width * resize_factor),
                                                      int(watermark_height * resize_factor)))
watermark_gray = cv2.cvtColor(watermark_image_resized, cv2.COLOR_BGR2GRAY)
x_offset = original_width - watermark_image_resized.shape[1] - 10
y_offset = original_height - watermark_image_resized.shape[0] - 10
roi = original_image[y_offset:y_offset + watermark_image_resized.shape[0],
                     x_offset:x_offset + watermark_image_resized.shape[1]]
_, mask = cv2.threshold(watermark_gray, 240, 255, cv2.THRESH_BINARY)
mask_inv = cv2.bitwise_not(mask)
watermarked_roi = cv2.bitwise_and(roi, roi, mask=mask_inv)
watermark_blend = cv2.bitwise_and(watermark_image_resized, watermark_image_resized, mask=mask)
watermarked_roi = cv2.add(watermarked_roi, watermark_blend)
original_image[y_offset:y_offset + watermark_image_resized.shape[0],
               x_offset:x_offset + watermark_image_resized.shape[1]] = watermarked_roi
cv2.imshow('Watermarked Image', original_image)
cv2.waitKey(0)
output_image_path = r"path_to_output_image_with_watermark.jpg"
cv2.imwrite(output_image_path, original_image)
cv2.destroyAllWindows()
